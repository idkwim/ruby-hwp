#!/usr/bin/ruby
# coding: utf-8
# apt-get install libole-ruby
# or gem install ruby-ole
# (주)한글과컴퓨터의 한컴오피스 글 문서 파일 구조(.hwp) 참고하여 만들었습니다.

require 'ole/storage'
require 'zlib'
require 'stringio'

# 이해하기 쉽게 몇 가지 함수 정의
module Utils
    def read_int8
        self.read(1).unpack("c").pop
    end

    def read_uint8
        self.read(1).unpack("C").pop
    end

    def read_int16
        self.read(2).unpack("s").pop
    end

    def read_uint16
        self.read(2).unpack("v").pop
    end

    def read_int32
        self.read(4).unpack("l").pop
    end

    def read_uint32
        self.read(4).unpack("V").pop
    end

    alias_method :read_byte,   :read_uint8
    alias_method :read_sbyte,  :read_int8
    alias_method :read_word,   :read_uint16
    alias_method :read_sword,  :read_int16
    alias_method :read_dword,  :read_uint32
    alias_method :read_sdword, :read_int32
end

class File
    include Utils
end

class StringIO
    include Utils
end

class Ole::Storage::RangesIOMigrateable
    include Utils
end

class String
    def to_hex
        self.unpack("C*").collect{|c| sprintf("%02x", c)}.join(" ")
    end
end

if ARGV.length.zero?
    puts "Usage: $ ruby hwp2txt filename.hwp"
    exit
end

OLE_SIGNATURE = [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1].pack("C*").freeze
HWP_V3_SIGNATURE = "HWP Document File V3.00 \x1A\x01\x02\x03\x04\x05"

def hwp_v5_to_txt filename
    ole = Ole::Storage.open(ARGV[0], 'r')
    file = ole.file.open('FileHeader')
    file.pos = 36
    property = file.read_uint32

    if (property & 1) == 1
        compressed = true
    else
        compressed = false
    end

    ole.dir.entries('BodyText').each do |f|
        if f.start_with? "Section"
            section = ole.file.read("BodyText/#{f}")

            if compressed
                z = Zlib::Inflate.new(-15)
                buf = StringIO.new(z.inflate section)
                z.finish
                z.close
            else
                buf = StringIO.new(section)
            end

            while(not buf.eof?) # 레코드 헤더를 읽는다
                i = buf.read_uint32
                record_id   = i & 0x3ff
                record_size = (i >> 20) & 0xfff

                if record_size == 0xfff
                    record_size = buf.read_uint32
                end 

                if record_id == 67
                    data = buf.read(record_size)

                    stream = StringIO.new data
                    result = ""
                    while(not stream.eof?)
                        i = stream.read_uint16
                        case i
                        # 2-byte control string
                        when 0,10,13,24,25,26,27,28,29,31
                        when 30 # 0x1e record separator (RS)
                            result << " " # 임시로 스페이스로 대체
                        # 16-byte control string, inline
                        when 4,5,6,7,8,19,20
                            stream.pos += 14
                        when 9 # tab
                            result << "\t"
                            stream.pos += 14
                        # 16-byte control string, extended
                        when 1,2,3,11,12,14,15,16,17,18,21,22,23
                            stream.pos += 14
                        else
                            result << [i].pack("U")
                        end
                    end
                    puts result
                    stream.close
                else
                    buf.pos += record_size
                end
            end
            buf.close
        end
    end

    ole.close
end

# HNC 조합형 11172 음절 --> 유니코드 변환용 표
L_MAP = [nil, nil,   0,   1,   2,   3,   4,   5,
           6,   7,   8,   9,  10,  11,  12,  13,
          14,  15,  16,  17,  18,  19,  20, nil,
         nil, nil, nil, nil, nil, nil, nil, nil]

V_MAP = [nil, nil, nil, 0,  1,  2,  3,  4, nil, nil,  5,  6,  7,  8,  9,  10,
         nil, nil, 11, 12, 13, 14, 15, 16, nil, nil, 17, 18, 19, 20, nil, nil]

T_MAP = [nil,  0,   1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  13, 14,
          15, 16, nil, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, nil, nil]

# HNC 자모 출력용 표
HNC_L1 = ["ㅲ",  nil, "ㄱ", "ㄲ", "ㄴ", "ㄷ", "ㄸ", "ㄹ",
          "ㅁ", "ㅂ", "ㅃ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅉ",
          "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ", "ㅳ", "ㅄ", "ㅶ",
          "ㅸ", "ㅺ", "ㅼ", "ㅽ", "ㅾ", "ㅿ", "ㆁ", "ㆅ"]

HNC_V1 = [ nil,  nil,  nil, "ㅏ", "ㅐ", "ㅑ", "ㅒ", "ㅓ",
           nil,  nil, "ㅔ", "ㅕ", "ㅖ", "ㅗ", "ㅘ", "ㅙ",
           nil, "ㆉ", "ㅚ", "ㅛ", "ㅜ", "ㅝ", "ㅞ", "ㅟ",
          "ㆊ", "ㆌ", "ㅠ", "ㅡ", "ㅢ", "ㅣ", "ㆍ", "ㆎ"]

HNC_T1 = ["ㅭ",  nil, "ㄱ", "ㄲ", "ㄳ", "ㄴ", "ㄵ", "ㄶ",
          "ㄷ", "ㄹ", "ㄺ", "ㄻ", "ㄼ", "ㄽ", "ㄾ", "ㄿ",
          "ㅀ", "ㅁ", "ㅸ", "ㅂ", "ㅄ", "ㅅ", "ㅆ", "ㅇ",
          "ㅈ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ", "ㅿ", "ㆁ"]

# HNC 옛한글 조합용 표
HNC_L2 = [0x111e, 0x115f, 0x1100, 0x1101, 0x1102, 0x1103, 0x1104, 0x1105,
          0x1106, 0x1107, 0x1108, 0x1109, 0x110a, 0x110b, 0x110c, 0x110d,
          0x110e, 0x110f, 0x1110, 0x1111, 0x1112, 0x1120, 0x1121, 0x1127,
          0x112b, 0x112d, 0x112f, 0x1132, 0x1136, 0x1140, 0x114c, 0x1158]

HNC_V2 = [   nil,    nil, 0x1160, 0x1161, 0x1162, 0x1163, 0x1164, 0x1165,
             nil,    nil, 0x1166, 0x1167, 0x1168, 0x1169, 0x116a, 0x116b,
             nil, 0x1188, 0x116c, 0x116d, 0x116e, 0x116f, 0x1170, 0x1171,
          0x1191, 0x1194, 0x1172, 0x1173, 0x1174, 0x1175, 0x119e, 0x11a1]

HNC_T2 = [0x11d9,    nil, 0x11a8, 0x11a9, 0x11aa, 0x11ab, 0x11ac, 0x11ad,
          0x11ae, 0x11af, 0x11b0, 0x11b1, 0x11b2, 0x11b3, 0x11b4, 0x11b5,
          0x11b6, 0x11b7, 0x11e6, 0x11b8, 0x11b9, 0x11ba, 0x11bb, 0x11bc,
          0x11bd, 0x11be, 0x11bf, 0x11c0, 0x11c1, 0x11c2, 0x11eb, 0x11f0]

def hwp_v3_to_txt file
    begin
        require 'hwp/hnc2unicode'
    rescue Exception
        $LOAD_PATH << File.expand_path(File.dirname(__FILE__)) + '/../lib'
        require 'hwp/hnc2unicode'
    end

    # 암호 여부
    file.pos = 30 + 96
    is_crypt = file.read_uint16

    # 문서 정보 128 bytes
    # offset: 124 압축 여부, 0이면 비압축 그외 압축
    file.pos = 30 + 124
    is_compress = file.read_int8

    # sub revision
    file.pos = 30 + 125
    rev = file.read_int8

    # 정보 블럭 길이
    file.pos = 30 + 126
    info_block_len = file.read_uint16

    # 문서 요약 1008 bytes
    file.pos += 1008

    # 정보 블럭 건너뛰기
    file.pos += info_block_len

    # 압축 풀기
    if is_compress == 0
        data_io = StringIO.new(file.read)
    else
        require 'zlib'
        z = Zlib::Inflate.new(-Zlib::MAX_WBITS)
        data_io = StringIO.new(z.inflate file.read)
        z.finish; z.close
    end

    # 글꼴 이름
    # (7 * n_fonts * 40 ) bytes
    7.times do
        n_fonts = data_io.read_uint16
        data_io.pos += 40 * n_fonts
    end

    # 스타일
    n_styles = data_io.read_uint16
    data_io.pos += n_styles * (20 + 31 + 187)

    def bit_nth(mask, nth_bit)
        (mask & (1 << nth_bit)) >> nth_bit
    end

    def parse_paragraph(stream)
        # 문단 정보
        prev_paragraph_shape = stream.read_uint8  # 1
        n_chars              = stream.read_uint16 # 2
        n_lines              = stream.read_uint16 # 2
        char_shape_included  = stream.read_uint8  # 1
        stream.pos += (1 + 4 + 1 + 31)
        # 여기까지 43 bytes

        if prev_paragraph_shape.zero? and n_chars > 0
            stream.pos += 187
        end

        # 빈문단이면 false 반환
        return false if n_chars.zero?

        # 줄 정보
        stream.pos += n_lines * 14

        # 글자 모양 정보
        unless char_shape_included.zero?
            n_chars.times do
                flag = stream.read_uint8
                stream.pos += 31 if flag != 1
            end
        end

        # 글자들
        n_chars_read = 0

        while(n_chars_read < n_chars)
            i = stream.read_uint16 # 2바이트씩 읽는다.
            n_chars_read += 1

            case i # unsigned integer(2-byte) little endian
            when 6 # 책갈피
                n_chars_read += 20
                stream.pos   += 40
            when 9 # tab
                n_chars_read += 3
                stream.pos   += 6
                print "\t"
            when 10 # 표
                n_chars_read += 3
                stream.pos   += 6

                # 테이블 식별 정보 84 바이트
                stream.pos += 80
                n_cells = stream.read_uint16
                stream.pos += 2

                stream.pos += (27 * n_cells)

                # <셀 문단 리스트>+
                (n_cells).times do |i|
                    #<셀 문단 리스트> ::= <셀 문단>+ <빈문단>
                    while(parse_paragraph(stream))
                    end
                end

                # <캡션 문단 리스트> ::= <캡션 문단>+ <빈문단>
                while(parse_paragraph(stream))
                end
            when 11 # 그림
                n_chars_read += 3
                stream.pos   += 6
                len = stream.read_uint32 # read 4 bytes, 추가 정보 길이
                stream.pos   += 344
                stream.pos   += len
                # <캡션 문단 리스트> ::= <캡션 문단>+ <빈문단>
                while(parse_paragraph(stream))
                end
            when 13 # 글자들 끝
                puts ""
            when 16 # 머리말/꼬리말
                n_chars_read += 3
                stream.pos   += 6
                stream.pos   += 10
                # <문단 리스트> ::= <문단>+ <빈문단>
                while(parse_paragraph(stream))
                end
            when 17 # 각주/미주
                n_chars_read += 3
                stream.pos   += 6
                # 각주/미주 정보 건너 뛰기
                stream.pos   += 14
                while(parse_paragraph(stream))
                end
            when 18..20
                n_chars_read += 3
                stream.pos   += 6
            when 23 # 글자 겹침
                n_chars_read += 4
                stream.pos   += 8
            when 25 # 제목/표/그림차례 표시
                n_chars_read += 2
                stream.pos   += 4
            when 30, 31
                n_chars_read += 1
                stream.pos   += 2
            when 0x0020..0x7fff
                begin
                    print [HNC2UNICODE[i]].pack("U")
                rescue
                    raise NotImplementedError.new("HNC code: 0x#{i.to_s(16)}")
                end
            when 0x8000..0xffff # 조합 한글 영역
                l = (i & 0x7c00) >> 10 # 초성
                v = (i & 0x03e0) >> 5  # 중성
                t = (i & 0x001f)       # 종성

                begin
                    # 조합형 현대 한글 음절(11172)을 유니코드로 변환
                    syllable = 0xac00 + (L_MAP[l] * 21 * 28) +
                                        (V_MAP[v] * 28) + T_MAP[t]
                    print [syllable].pack("U")
                rescue
                    # 초성만 존재하는 경우 유니코드 한글 호환 자모로 변환
                    if HNC_L1[v] and HNC_V1[v].nil? and HNC_T1[t].nil?
                        print HNC_L1[l]
                        next
                    # 중성만 존재하는 경우 유니코드 한글 호환 자모로 변환
                    elsif HNC_L1[l].nil? and HNC_V1[v] and HNC_T1[t].nil?
                        print HNC_V1[v]
                        next
                    # 종성만 존재하는 경우 유니코드 한글 호환 자모로 변환
                    elsif HNC_L1[l].nil? and HNC_V1[v].nil? and HNC_T1[t]
                        print HNC_T1[t]
                        next
                    # 초성과 중성만 존재하는 조합형 옛한글의 경우
                    elsif HNC_L2[v] and HNC_V2[v] and HNC_T2[t].nil?
                        print [HNC_L2[l], HNC_V2[v]].pack("U*")
                    # 초성, 중성, 종성 모두 존재하는 조합형 옛한글의 경우
                    elsif HNC_L2[v] and HNC_V2[v] and HNC_T2[t]
                        print [HNC_L2[l], HNC_V2[v], HNC_T2[t]].pack("U*")
                    # 완성형 옛한글
                    elsif v.zero?
                        if HNC2UNICODE[i]
                            print HNC2UNICODE[i].pack("U*")
                        else
                            raise NotImplementedError.new("HNC code: 0x#{i.to_s(16)} (l:#{l} v:#{v} t:#{t})")
                        end
                    else
                        raise NotImplementedError.new("HNC code: 0x#{i.to_s(16)} (l:#{l} v:#{v} t:#{t})")
                    end
                end
            else
                raise NotImplementedError.new("HNC code: 0x#{i.to_s(16)}")
            end
        end
        true
    end

    def parse(stream)
        #<문단 리스트> ::= <문단>+ <빈문단>
        while(!stream.eof? and parse_paragraph(stream))
        end
    end

    parse(data_io)
end

file = File.open ARGV[0]

# file signature 검사
signature = file.read(30)

if signature[0..7] == OLE_SIGNATURE
    hwp_v5_to_txt(file)
elsif signature == HWP_V3_SIGNATURE
    hwp_v3_to_txt(file)
else
    file.close
    puts "This file is not a valid hwp file."
    exit
end
file.close
